{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { BROWSER_STORAGE } from \"../storage\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TripDataService = /*#__PURE__*/(() => {\n  class TripDataService {\n    constructor(http, storage) {\n      this.http = http;\n      this.storage = storage;\n      this.apiBaseUrl = \"http://localhost:3000/api/\";\n    }\n    getTrips() {\n      return this.http.get(`${this.apiBaseUrl}trips`).toPromise();\n    }\n    getTrip(tripCode) {\n      return this.http.get(`${this.apiBaseUrl}trips/${tripCode}`).toPromise();\n    }\n    addTrip(formData) {\n      return this.http.post(`${this.apiBaseUrl}trips`, formData).toPromise();\n    }\n    updateTrip(formData) {\n      return this.http.put(`${this.apiBaseUrl}trips/${formData.code}`, formData).toPromise();\n    }\n    login(user) {\n      return this.makeAuthApiCall(\"login\", user);\n    }\n    register(user) {\n      return this.makeAuthApiCall(\"register\", user);\n    }\n    makeAuthApiCall(urlPath, user) {\n      return this.http.post(`${this.apiBaseUrl}${urlPath}`, user).toPromise();\n    }\n    handleError(error) {\n      console.error(\"Something has gone wrong\", error);\n      return Promise.reject(error.message || error);\n    }\n    static #_ = this.ɵfac = function TripDataService_Factory(t) {\n      return new (t || TripDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BROWSER_STORAGE));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TripDataService,\n      factory: TripDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TripDataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}